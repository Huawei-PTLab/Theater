1) What's the problem

Writing apps that perform complex operations such as bank transactions and vehicle communications require a significant design effort and lots of variables and objects to keep the internal state of the system.

compare:

func doMagic(param : Any) : Unit

with 

func doMagic(hat : Hat) : Rabbit 


The time for easy solutions to complex problems is long gone, it is our responsability to raise the bar and take software to the next level.

examples:

Cybersecurity.
Big Data: Machine learning, neural networks etc

Application development is an interesting case.

Before the iPhone, cell phones were very similar to embeded hardware. 

Programming languages were subsets of "Desktop" programming languages.

Who remembers Java micro edition, does anyone still uses that? Who remembers Blackberry?

iOS started as a fork of MacOS and adopted it's programming language, Objective C.

Objective C is OK if you're comming from C or from assembly.

I learned Scala and Java last year, and I can tell you that Objective C is just inferior in so many ways, that it is just a lesser tool than Java or Scala.

Of course Apple knows this, so on the Apple Developers Conference of 2014 they announced Swift, a "new language" to code apps for iOS and Mac OSX.

Swift is the new standard language for iOS and Mac OSX and all new apps should be written in Swift to guarantee that are going to work in the near Future. 

I've learned from Apple that when they come with a new way to do something, they tend to get rid of the previous one fairly fast.

Swift is an effort to:

Reduce the number of lines that an app has.
Make it more typesafe so that XCode can help you more.
Adopt best practices from other languages such as Java, Python and a little bit of Scala.

The problem with Swift is that it does not attempt to change the way that we think about Apps from a Software design perspective.

I have to say that having immutable variables and structures does help.

That is why I decided to build Theater.

Listen, I've been making iOS apps since 2009 and I really like it, but is just, too much manual labor, too much code, and too much boilerplate to get an app to work properly.

Mutable state problems:

1) race conditions.
2) software getting stuck because the "variables" in a given object got corrupted.
3) Software depends on a sequence of events and has a bunch of timers and semaphores to make sure that things happen in the right order.

It would be great if we could code in such a way that we do not need as many variables to keep the right state in our objects.

It would be awesome if we did not have to worry too much about how to syncronize concurrent code and handle async operations in a cleaner way without a bunch of flags and semaphores.

Last year, I took a couple of Functional Programming courses at the EPFL in Switzerland and I learned new ways to reason about software architecture and how to address many common design challenges such as mutable state and scalability.

I found that there are many models of concurrent computation that address this issues.

In particular, the actor model is a very practical and intuitive approach that solves many of the challenges of managing concurrent code.





2) Actor Model

3) Async,

4) Ping Pong example

